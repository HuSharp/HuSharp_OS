
BIOS->MBR->loader->加载内核
在loader.S 加载内核时，主要完成以下两项任务：
	1.加载内核：将内核文件先放到内存缓冲区
	2.初始化内核：在分页完成后，将elf内核文件解析后安置到对应虚拟内存地址中，再跳去执行


在开机的一瞬间，CS：IP强制初始化为 0xF000:0xFFF0,即为BIOS入口地址
BIOS:	0xF0000-0xFFFFF 64KB都为系统BIOS范围，被写入ROM中
	1.FFFF0-FFFFF BIOS的入口地址， jmp f000:e05b 16B只有这么一条语句，剩下的作为保留
	2.在 jmp 跳转后，检测内存，显卡外设信息，在内存0x000 - 0x3FF 建立IDT,并填写中断例程
	3.检测0盘0道1扇区的内容（MBR所在处）
MBR：	位于0盘0道1扇区（由于是 CHS扇区表示方法，即为最开始扇区），末尾为 0x55aa,被识别末尾魔数后，被加载到 0x7c00
	1.大小为 512 字节
	2.	
7c00：历史原因——尽可能留足够的空间给操作系统在32K内加载自己
0x7FFF - 512 - 512 + 1 // 开机扇区512字节，再留出512字节 

loader.bin 的加载地址为 0x900，放在第 2 块扇区( boot.inc) 
loder.bin 占用 3 个扇区，即第 2~4不能使用
	至于为啥是 0x900，是由于实模式的内存空间布局下0x500 - 0x7BFF 为可用区域，而为啥不是 0x500 ，是完全个人喜好，隔远点

全局描述符表：保护模式下内存段的登记表 即位于 Loader 0x900处
描述符desc 占 8 个字节，含有 base，limit，addr等
选择子：位于段寄存器，是 GDT 的索引
--------选择子结构---------
15		3  2   0
描述符索引值	 TI  RPL
--------------------------
--------------------- 中断 --------------------------
中断过程：一个中断源会产生一个中断向量，一个向量对应中断描述符表中的一个门描述符，通过该描述符找到对应的中断处理程序。（中断发生时，eflags 的 NT & TF 位被置为 0 ；中断返回为 iret）
中断向量表 （IVT）：由于 IVT 是在实模式下存储中断处理程序入口的表。因此在实模式中固定在 0~0x3ff(1024个字节)
中断向量：4 字节，因此 IVT 中有 256 个中断向量
中断描述符：8 字节
中断描述符表：位置不固定，由 IDTR 存储位置。 
中断发生时的压栈：先判断 特权级，（若特权级发生变化，需要保存 旧ss 和 esp 值），再压入 eflags, cs, eip, error_code。 
-------------------- 8259A 可编程中断控制控制器 ----------------
8259A 为两个芯片级联，共有 16 个IRQ 接口，由于从片连接主片需要一个接口，因此 8259A 共支持 15 个中断接口。
;-----------------   准备进入保护模式步骤   -------------------
;1 打开A20
;2 加载gdt
;3 将cr0的pe位置1
;-----------------------------------------------------------------

kernel 选择第 9 扇区（从 1 扇区开始算则为第 10 个扇区————纯粹个人喜好，与 loader 隔远点）
且 由于以后内核大小不会超过 100 kb，因此将大小设为 200 扇区（图方便）
kernel.bin 放到 0x70000 因为 0x70000~0x9fbff 为空闲位置，有 190KB > kernel.bin
 
内核：内核被加载到内存中，loader 还需要通过分析 elf 结构来将 kernel.bin 展开到新的位置。因此：内核在内存中有两份：
	1.为 elf 格式的 kernel.bin 文件，经过解析之后就没用了
	2.为 loader 解析 1.文件后，在内存中生成的 kernel 映像，即完成初始化内核后的的真正运行内核。
	注：初始化内核，就是根据 elf 规范，将内核文件中的段（segment）复制到内存中的相应位置
内核的入口虚拟地址为：0xc0001500
	来源是：为了内核映像不覆盖 loader.bin(因为里面有 GDT)，由于 loader.bin 加载地址为 0x900，大小 < 2000字节，因此 0x900+2000 = 0x10d0，因此选个整数为 0x1500
栈起始地址改为：0xc009f000
	--->至于为何不是 0xc009fc00 是由于 PCB 占一页 1000，因此为了对齐，需要采用整数

---------------------------------所以空间布局-----------------------------
   ...
可用空间		<--- 0x9fc00
栈			<--- 0x9f000
   ...
内核文件 kernel.bin	<--- 0x70000
   ...
MBR			<--- 0x7c00
   ...
内核映像 kernel		<--- 0x1500
   ...		
loader.bin(GDT所在处)	<--- 0x900
可用空间		<--- 0x500
-----------------------------------------------------------------------------

而 total_mem_bytes 与loader.bin 之间还有 4 个段描述符（第 0 个不可用，第 1 个为代码段，第 2 个为数据段和栈，第 3 个为显存段）
以及 60 个预留段描述符槽位，因此 (60 + 4) * 8 = 512 = 0x200
total_mem_bytes : 0xb00 (存储获取到的内存变量)

页目录表： （物理地址）0x100000~0x100fff 4KB
第一个页表：（物理地址）0x101000~0x101fff 4KB
为映射到 0xc0000000，对应的页目录项为第 768 个，由于一个页表(页表项4字节)表示 4MB = (4GB/4KB)*4字节
所以第 768 个页目录项对应的虚拟地址 4MB：0xc0000000~0xc003ffff 指向低端 4MB之内的物理地址
为了实现所有用户共享内核，因此将 各个用户的虚拟地址高 1 GB都指向内核所在的物理内存空间。即每个用户 768~1022（共254个PDE）都与其他进程一致。（即：提前将内核的所有PDE都定下来，在创建用户进程时，直接将内核对应PDE复制，以达到内核共享）。


虚拟地址 0xc0000000~0xc00fffff 映射 物理地址 0x00000000~0x000fffff(低端 1Mb 内存)
0xc0100000：堆的起始地址（注意：由于0x100000~0x101fff为页目录表和页表，因此 0xc0100000并不映射到此处，需要绕开）
0xc009f000是内核主线程栈顶，
0xc009e000是内核主线程的pcb. PCB占用 1 页 0x1000
0xc009a000:位图位置

 
0xc0000000是内核从虚拟地址3G起. 0x100000意指跨过低端1M内存

0x9f000：内核主线程栈顶
内核估计 70 kb 左右。装载到 0x9f000绰绰有余
因此在 低端 1MB 下所用到的最高地址，即为 main线程的栈顶地址 0x9f000

0xc009a000:位图位置
一个页框大小的位图可表示128M内存, 位图位置安排在地址0xc009a000

由于 虚拟机配置 32 MB 物理内存，因此需要 1024 字节 bitmap -> 4kb * 1024 * 8 = 32 MB
即  1/4 页 ，但是我很任性，想搞 4 页，即 0x4000
又因为 pcb 位于 0xc009e000，所以将位图放在下面 0xc009e000 - 0x4000 = 0xc009a000

堆的起始地址：（为了让虚拟地址连续）
#define K_HEAP_START 0xc0100000 


--------------------------------------------------
PCB ----> task_struct
struct task_struct {
   uint32_t* self_kstack;	 // 各内核线程都用自己的内核栈,用来记录栈顶指针
   _pid_t pid;
   enum task_status status;
   char name[16];
   uint8_t priority;
   uint8_t ticks;	   // 每次在处理器上执行的时间嘀嗒数
   uint32_t elapsed_ticks;// 此任务自上cpu运行后至今占用了多少cpu嘀嗒数,也就是此任务执行了多久
   struct list_elem general_tag;//general_tag的作用是用于线程在一般的队列中的结点				    
   struct list_elem all_list_tag;// all_list_tag的作用是用于线程队列thread_all_list中的结点 
   uint32_t* pgdir;              // 进程自己页表的虚拟地址
   struct virtual_addr userprog_vaddr;   // 用户进程的虚拟地址
   uint32_t stack_magic;	 // 用这串数字做栈的边界标记,用于检测栈的溢出
};

寄存器映像	---中断栈 intr_stack： 	| kernel.S 中的 intr_exit 的出栈操作为此结构的逆操作
	1.任务被中断时，保存寄存器映像
	2.给进程预留，用来填充用户进程上下文，即寄存器环境		
栈		---线程栈 thread_stack：保存待运行的函数，并进行任务切换	| 内核栈 = 中断栈 + 线程栈
栈指针		---记录线程栈栈顶，因为中断栈不固定 <----self_kstack
pid
进程状态
优先级
时间片
页表
打开文件描述符
父进程
...



----------------------------------------------------
switch_to

---------------------------------------------------
系统调用步骤：
1. 在 syscall.h 的结构 enum SYSCALL_NR 中添加新的子功能号
2. 在 syscall.c 中增加系统调用的用户接口
3. 在 syscall_init.c 定义子功能处理函数，并在syscall_table 中注册

